1.ll or ls -al 查看文件信息,后者包括隐藏文件
dr-xr-xr-x.  4 root root  4096 8月  16 20:47 boot
文档类型权限-连接数-文档拥有者-文档所属群组-文档容量-文档最后修改时间-文件或者文件夹名称
*文件名之前有个“.”表示是隐藏文件
*权限类型最后有个“.”表示selinux和acl的设置，当文件或者文件夹只使用了selinux context的属性
----------------------------------------------------------------------------------------
2.文档权限类型
d/r-x/r-x/r-x
第一个字符：[d]目录，[-]文件，[l]链接文件，[b]可随机存取设备，[c]键盘鼠标等一次性读取设备
接下来三个为一组，均为[r]读,[w]写,[x]执行，[-]无权限
第一组：文件拥有者可具备的权限
第二组：加入此群组的账号权限
第三组：非拥有者且不是群组的其他账号权限
*文件夹的x权限表示是否可以cd到该文件夹中
----------------------------------------------------------------------------------------
3.改变文件权限，其实root不受影响
chmod 754 filename 
-/rwx/r-x/r-- 权限的分数[4+2+1][4+0+1][4+0+0]=754 二进制
另一种方法：
（1）user （2）group （3）others可以借由u, g, o来代表三种身份的权限
-rwxr-xr--    chmod u=rwx,g=rx,o=r filename
chmod a+w filename 所有人都加写权限
chmod a-x filename 所有人都去除执行权限
----------------------------------------------------------------------------------------
4.改变权限相关操作，都是英文缩写
chgrp 改变所属群组
chown 改变文件拥有者
chmod 改变权限
----------------------------------------------------------------------------------------
5.目录
/ （root, 根目录）：与开机系统有关；
/usr （unix software resource）：与软件安装/执行有关；
/var （variable）：与系统运行过程有关

FHS要求必须要存在的目录
/bin 在单人维护模式下还能够被操作的指令,在/bin下面的指令可以被root与一般帐号所使用，
主要有：cat, chmod, chown, date, mv, mkdir, cp, bash等等常用的指令。
/boot 主要在放置开机会使用到的文件，包括Linux核心文件以及开机菜单与开机所需配置文件等等
/dev 任何设备与周边设备都是以文件的型态存在于这个目录当中的
/etc 系统主要的配置文件几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等
/lib 在开机时会用到的函数库， 以及在/bin或/sbin下面的指令会调用的函数库
/media 可移除的设备
/mnt 暂时挂载某些额外的设备
/opt 给第三方协力软件放置的目录.也可以习惯放置在/usr/local下
/run 系统开机后所产生的各项信息
/sbin 为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令；某些服务器软件程序，一般则放置到/usr/sbin/
/srv 是一些网络服务启动之后，这些服务所需要取用的数据目录,常见的服务例如WWW, FTP等等
/tmp 让一般使用者或者是正在执行的程序暂时放置文件的地方。 这个目录是任何人都能够存取的,重要数据不可放置在此目录

FHS建议可以存在的目录
/home 系统默认的使用者主文件夹
/lib<qual> 用来存放与 /lib 不同的格式的二进制函数库，例如支持 64 位的 /lib64 函数库等
/root 系统管理员（root）的主文件
/lost+found 目录是使用标准的ext2/ext3/ext4文件系统格式才会产生的一个目录，目的在于当文件系统发生错误时， 
将一些遗失的片段放置到这个目录下。不过如果使用的是 xfs 文件系统的话，就不会存在这个目录
/proc 本身是一个“虚拟文件系统（virtual filesystem）,他放置的数据都是在内存当中， 例如系统核心、行程信息（process）、
周边设备的状态及网络状态等等。不占用硬盘空间
/sys 跟/proc非常类似，也是一个虚拟的文件系统，主要也是记录核心与系统硬件信息较相关的信息。包括目前已载入的核心模块与核心侦
测到的硬件设备信息等等。这个目录同样不占硬盘容量
----------------------------------------------------------------------------------------
6./usr
FHS 要求必须要存在的目录
/usr/bin 放置所有一般用户能够使用的指令；使用链接文件的方式将 /bin 链接至此，/usr/bin 与 /bin 是一样的，
另外，FHS 要求在此目录下不应该有子目录
/usr/lib/ 基本上，与 /lib 功能相同，所以 /lib 就是链接到此目录
/usr/local/ 系统管理员在本机自行安装自己下载的软件
/usr/sbin/  非系统正常运行所需要的系统指令
/usr/share/ 要放置只读架构的数据文件，当然也包括共享文件

FHS 建议可以存在的目录
/usr/games/ 与游戏比较相关的数据放置处
/usr/include/ c/c++等程序语言的文件开始（header）与包含档（include）放置处
/usr/libexec/ 某些不被一般使用者惯用的可执行文件或脚本（script）等等
/usr/lib<qual>/ 与 /lib<qual>/功能相同，因此目前 /lib<qual> 就是链接到此目录中
/usr/src/ 一般源代码建议放置到这里
----------------------------------------------------------------------------------------
7./var
FHS 要求必须要存在的目录
/var/cache/  应用程序本身运行过程中会产生的一些暂存盘
/var/lib/ 程序本身执行的过程中，需要使用到的数据文件放置的目录
/var/lock/ 某些设备或者是文件资源一次只能被一个应用程序所使用,以确保该设备只会给单一软件所使用
/var/log/ 重要!这是登录文件放置的目录！里面比较重要的文件如/var/log/messages, /var/log/wtmp（记录登陆者的信息）等
/var/mail/ 放置个人电子邮件信箱的目录，不过这个目录也被放置到/var/spool/mail/目录中,互为链接文件
/var/run/  某些程序或者是服务启动后，会将他们的PID放置在这个目录下
/var/spool/ 目录通常放置一些伫列数据，所谓的“伫列”就是排队等待其他程序使的数据,这些数据被使用后通常都会被删除

*链接文件
/bin --> /usr/bin
/sbin --> /usr/sbin
/lib --> /usr/lib
/lib64 --> /usr/lib64
/var/lock --> /run/lock
/var/run --> /run
----------------------------------------------------------------------------------------
8.绝对路径 or 相对路径
cd /var/log （absolute）
cd ../var/log （relative）

. ：代表当前的目录，也可以使用 ./ 来表示；
.. ：代表上一层目录，也可以 ../ 来代表。
- 代表前一个工作目录
~ 代表“目前使用者身份”所在的主文件夹
~account 代表 account 这个使用者的主文件夹（account是个帐号名称）
----------------------------------------------------------------------------------------
9.目录操作指令
cd：变换目录
pwd：显示目前的目录
mkdir：创建一个新的目录
rmdir：删除一个空的目录

mkdir -m 711 test2 设置权限，在当前目录下新建目录
mkdir -p /home/bird/testing/test1   新建多级目录
----------------------------------------------------------------------------------------
10.$PATH
echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
----------------------------------------------------------------------------------------
11.ls 文件与目录的检查
-a ：全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（常用）
-A ：全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录
-d ：仅列出目录本身，而不是列出目录内的文件数据（常用）
-f ：直接列出结果，而不进行排序 （ls 默认会以文件名排序！）
-F ：根据文件、目录等信息，给予附加数据结构，例如：
*:代表可可执行文件； /:代表目录； =:代表 socket 文件； &#124;:代表 FIFO 文件；
-h ：将文件大小以人类较易读的方式（例如 GB, KB 等等）列出来；
-i ：列出 inode 号码，inode 的意义下一章将会介绍；
-l ：长数据串行出，包含文件的属性与权限等等数据；（常用）
-n ：列出 UID 与 GID 而非使用者与群组的名称 （UID与GID会在帐号管理提到！）
-r ：将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小；
-R ：连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；
-S ：以文件大小大小排序，而不是用文件名排序；
-t ：依时间排序，而不是用文件名。
--color=never ：不要依据文件特性给予颜色显示；
--color=always ：显示颜色
--color=auto ：让系统自行依据设置来判断是否给予颜色
--full-time ：以完整时间模式 （包含年、月、日、时、分） 输出
--time={atime,ctime} ：输出 access 时间或改变权限属性时间 （ctime）而非内容变更时间 （modification time）

----------------------------------------------------------------------------------------
12.复制cp，删除rm，移动mv
mv也可以用来修改文件名
----------------------------------------------------------------------------------------
13.取得路径的文件名称与目录名称
basename /etc/sysconfig/network  -> network
dirname /etc/sysconfig/network -> /etc/sysconfig
----------------------------------------------------------------------------------------
14.文件内容查阅
cat 由第一行开始显示文件内容
tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写
nl 显示的时候，顺道输出行号！
more 一页一页的显示文件内容
less 与 more 类似，但是比 more 更好的是，他可以往前翻页
head 只看头几行
tail 只看尾巴几行
od 以二进制的方式读取文件内容

touch 修改文件时间或创建新文件
----------------------------------------------------------------------------------------
15.文件默认权限：umask
umask 为 003 ，所以拿掉的权限为 --------wx
----------------------------------------------------------------------------------------
16.文件特殊权限： 主要是和程序相关
SUID(文件拥有者 x->s), 在程序执行过程过程中暂时获取root的执行权限，仅可用在binary program 上
SGID(群组 x->s), 在程序执行过程过程中暂时获取群组的执行权限，除了 binary program 之外，SGID 也能够用在目录上
SBIT(非 x->t) 目前只针对目录有效,只能够针对自己创建的文件或目录进行删除/更名/移动等动作，而无法删除他人的文件
-rwsr-xr-x chmod 4755 filename
-rwx--s--x 
drwxrwxrwt 任何人都可以在/tmp 内新增、修改文件，但仅有该文件/目录创建者与 root 能够删除自己的目录或文件
4 为 SUID
2 为 SGID
1 为 SBIT
----------------------------------------------------------------------------------------
17.观察文件类型：file
----------------------------------------------------------------------------------------
18.指令与文件的搜寻
which （寻找“可执行文件”）

whereis [-bmsu] 文件或目录名
-l :可以列出 whereis 会去查询的几个主要目录而已
-b :只找 binary 格式的文件
-m :只找在说明文档 manual 路径下的文件
-s :只找 source 来源文件
-u :搜寻不在上述三个项目当中的其他特殊文件

locate [-ir] keyword
选项与参数：
-i ：忽略大小写的差异；
-c ：不输出文件名，仅计算找到的文件数量
-l ：仅输出几行的意思，例如输出五行则是 -l 5
-S ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等
-r ：后面可接正则表达式的显示方式

find [PATH] [option] [action]
find /tmp -name "test*"
----------------------------------------------------------------------------------------
19.文件系统的简单操作
df 列出文件系统的整体磁盘使用量
du：评估文件系统的磁盘使用量（常用在推估目录所占容量）

/dev/shm/ 目录，其实是利用内存虚拟出来的磁盘空间，通常是总实体内存的一半
----------------------------------------------------------------------------------------
20.链接文件 In
----------------------------------------------------------------------------------------
21.磁盘的分区、格式化、检验与挂载
lsblk 列出系统上的所有磁盘列表
gdisk/fdisk 磁盘分区
----------------------------------------------------------------------------------------
22.压缩
*.Z compress 程序压缩的文件；
*.zip zip 程序压缩的文件；
*.gz gzip 程序压缩的文件；
*.bz2 bzip2 程序压缩的文件；
*.xz xz 程序压缩的文件；
*.tar tar 程序打包的数据，并没有压缩过；
*.tar.gz tar 程序打包的文件，其中并且经过 gzip 的压缩
*.tar.bz2 tar 程序打包的文件，其中并且经过 bzip2 的压缩
*.tar.xz tar 程序打包的文件，其中并且经过 xz 的压缩

gzip test1_1.txt -> test1_1.txt.gz 压缩
zcat test1_1.txt.gz 查看压缩文件内容
gzip -d test1_1.txt.gz -> test1_1.txt 解压

gzip 提供 1~9 的压缩等级，不过使用默认的6就非常好用

bzip2 test1_1.txt
bzcat 文件名.bz2
bzip2 -d 文件名.bz2

选项与参数：
-c ：将压缩的过程产生的数据输出到屏幕上！
-d ：解压缩的参数
-k ：保留原始文件，而不会删除原始的文件喔！
-z ：压缩的参数 （默认值，可以不加）
-v ：可以显示出原文件/压缩文件的压缩比等信息；
-# ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！

xz
xcat
xcat -d

gzip最快，压缩率越高花费时间越长
----------------------------------------------------------------------------------------
23.打包
*man tar 查询tar相关指令
tar [-z&#124;-j&#124;-J] [cv] [-f 待创建的新文件名] filename 打包与压缩
tar [-z&#124;-j&#124;-J] [tv] [-f 既有的 tar文件名]  察看文件名
tar [-z&#124;-j&#124;-J] [xv] [-f 既有的 tar文件名]  解压缩
选项与参数：
-c ：创建打包文件，可搭配 
-v 来察看过程中被打包的文件名（filename）
-t ：察看打包文件的内容含有哪些文件名，重点在察看“文件名”就是了；
-x ：解打包或解压缩的功能，可以搭配 -C （大写） 在特定目录解开
特别留意的是， -c, -t, -x 不可同时出现在一串命令行中。
-z ：通过 gzip 的支持进行压缩/解压缩：此时文件名最好为 *.tar.gz
-j ：通过 bzip2 的支持进行压缩/解压缩：此时文件名最好为 *.tar.bz2
-J ：通过 xz 的支持进行压缩/解压缩：此时文件名最好为 *.tar.xz
特别留意， -z, -j, -J 不可以同时出现在一串命令行中
-v ：在压缩/解压缩的过程中，将正在处理的文件名显示出来！
-f filename：-f 后面要立刻接要被处理的文件名！建议 -f 单独写一个选项啰！（比较不会忘记）
-C 目录 ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。
其他后续练习会使用到的选项介绍：
-p（小写） ：保留备份数据的原本权限与属性，常用于备份（-c）重要的配置文件
-P（大写） ：保留绝对路径，亦即允许备份数据中含有根目录存在之意；
--exclude=FILE：在压缩的过程中，不要将 FILE 打包！

压　缩：tar -j<u>c</u>v -f filename.tar.bz2 要被压缩的文件或目录名称
查　询：tar -j<u>t</u>v -f filename.tar.bz2
解压缩：tar -j<u>x</u>v -f filename.tar.bz2 -C 欲解压缩的目录

tar -jpcv -f /root/etc.tar.bz2 /etc
----------------------------------------------------------------------------------------
24.正则，匹配文件字符串
grep '123' test2/test1_1.txt

grep -n 'the' regular_express.txt 只显示包含目标字符串的行

grep -vn 'the' regular_express.txt 只显示不包含目标字符串的行

grep -in 'the' regular_express.txt 大小写不敏感

[0-9] 数字
[a-z] 小写
[A-Z] 大写
^ 行首
$ 行尾

grep -n '^[^a-zA-Z]' regular_express.txt
^ 符号，在字符集合符号（括号[]）之内与之外是不同的, 在 [] 内代表“反向选择”，在 [] 之外则代表定位在行首的意义

grep -n '\.$' regular_express.txt
取行尾为小数点的字符，且小数点需要转义

任意一个字符 .  代表“一定有一个任意字符”
grep -n 'g..d' regular_express.txt

重复字符 *  代表“重复前一个字符， 0 到无穷多次”的意思，为组合形态
grep -n 'ooo*' regular_express.txt

grep -n 'o\{2\}' regular_express.txt
{} 字符范围，需要转义

grep -n 'go\{2,3\}g' regular_express.txt
g 与 g 之间有 2 个到 3 个的 o 存在的字串

ls | grep -n '^t.*'
检查 + 正则
----------------------------------------------------------------------------------------
25.sed 工具
sed '2,3d' test2/test1_1.txt 删除2-3行
sed '2a hhhh' test2/test1_1.txt 在2行后面添加hhh
sed '2i hhhh' test2/test1_1.txt 在2行前面添加hhh
nl test2/test1_1.txt | sed '2,3d'  添加行号并删除

sed 's/要被取代的字串/新的字串/g' 搜索并替换

RE字符
+ 重复
？0个或者1个
| or
() 群组字符串
()+ 多群组重复

! 在正则表达式当中并不是特殊字符
----------------------------------------------------------------------------------------
26.文件比对工具
diff [-bBi] from-file to-file
-b ：忽略一行当中，仅有多个空白的差异（例如 "about me" 与 "about me" 视为相同
-B ：忽略空白行的差异。
-i ：忽略大小写的不同。

cmp 对比字节
----------------------------------------------------------------------------------------
27.shell script （程序化脚本）
计算生日
#!/bin/bash
read -p "Pleas input your birthday （MMDD, ex&gt; 0709）: " bir
now=`date +%m%d`
if [ "$bir" == "$now" ]; then
echo "Happy Birthday to you!!!"
elif [ "$bir" -gt "$now" ]; then
year=`date +%y`
total_d=$(($((`date --date="$year$bir" +%s`-`date +%s`))/60/60/24))
echo "Your birthday will be $total_d later"
else
year=$((`date +%Y`+1))
total_d=$(($((`date --date="$year$bir" +%s`-`date +%s`))/60/60/24))
echo "Your birthday will be $total_d days later"
fi
----------------------------------------------------------------------------------------
28.Linux 的帐号与群组
使用者识别码： UID 与 GID
UID User ID
GID Group ID 
----------------------------------------------------------------------------------------
29.SELinux
ls -Z
lrwxrwxrwx. root root system_u:object_r:bin_t:s0       bin -> usr/bin
Identify:role:type
身份识别:角色:类型

Identify：
unconfined_u：不受限的用户
system_u：系统用户

Role：
object_r：代表的是文件或目录等文件资源
system_r：代表的就是程序

Type:
type：在文件资源 （Object） 上面称为类型 （Type）；
domain：在主体程序 （Subject） 则称为领域 （domain）

----------------------------------------------------------------------------------------
*主要是学会了简单的Linux命令和Linux文件权限相关，
*vim简单操作
*正则表达式，这个值得一读，鸟哥讲的非常不错，且正则在其他地方使用的也非常广泛
*建议切合实际操作阅读，买一个小的云服务器即可










